Dernier type de base de données NoSQL 

Cassandra DB => Base de données NoSQL

initiatialement Cassandra => projet créé par Facebook => pouvoir faire des recherches rapide dans un énorme base de données 

donnée à la fondation Apache => open source 

=> comme pour Elastic Search base données facilement clusturisable (créer un serveur (Noeud) qui contient la base => ) modifie des paramètrages dans le serveur (Node1) et que l'on crée un autre serveur (Node2) =>

=> facilement les machines fonctionnent en collaboration  .

=> comment concevoir notre base de données ??? 

=> base de données NoSQL Orientée Colonnes => il va falloir designer nos tables => Query First => 

Créer des tables qui permettent de répondre à des requêtes SANS avoir à faire de JOINTURE 

TABLE user 
id  nom prenom salaire id_vehicule
PK  ALain DOE  100000     3 
                         FK : Foreign Key (clé étrangère / secondaire )

TABLE vehicule 
id  model 
1     BMW
2     Peugeot
3     Nissan 

en SQL classique => MySQL / MariaDB POstGRE / Oracle / sqlite 
// la liste des users qui ont un vehicule de marque Nissan 
SELECT *
FROM user 
JOIN vehicule 
ON vehicule.id = user.id_vehicule 
WHERE vehicule.model = "Nissan" ; // jointure 

Cassandra ne permet pas de réaliser des jointures

// créer table Query First => car on ne peut pas réaliser de JOIN 
// ce n'est pas du SQL dans Cassandra
// CQL => Cassandra Query Langage (sous version du SQL )

// Elastic Search => ils ont réinventer le langage SQL =>  Query DSL 


// Lorsque l'on travaille avec Cassandra DB => certaines informations qui doivent être doublée (répétée dans plusieurs tables )

---------------------------------

installer une VM => debian => machine un shell pas de version où on installer un bureau 
debian =>

1 récupérer l'ISO : https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.6.0-amd64-netinst.iso

Nouvelle VM :
Nom de la machine => Cassandra DB 

Linux 
Debian 64 version 11 Bullseye

Processeur 2 Processeur
RAM 4 Go 
Disque dur 20 Go 

Config 

Réseau  => Accès par pont (bridge)
Stockage => COntrolleur IDE => sélectionner l'ISO téléchargé précédemment
Système => Disque Dur en 1er 

Démarrer la VM => 
Installation de Débian dans la VM

Graphical Install
Français x 3
indiquer le nom du système : cassandra
home 
compte super admin => password : root x 2
le compte user en + => malik (mettez votre prénom)
et password de malik => root x 2
Partitionnement du disque => Manuel

sur le disque dur de la machine 
2 parties 
=> OS  18G primaire ext4
=> SWAP (si on n'a pas suffisament de RAM => le disque dur peut jouer le role de RAM) 3.5G logique swap 

https://prod.liveshare.vsengsaas.visualstudio.com/join?0637279C94885FC1CCC54BFA7DF4F67557F8


=> ip a sur la machine Debian qui a redémarrée 
=> 192.168.1.40 

=> lancer un terminal sur l'ordinateur et je vais établir une connexion SSH 

ssh malik@192.168.1.40 
fingerprint => yes 
password : root 

=> etes vous bloqués ??? puis je vous donner un coup de main pour installer votre Debian ??? 

// rdv 10h40 (heure de Paris) pour l'install de Cassandra sur votre nouvelle machine debian !!!

// bon café !!!!!!!!


----------------------

Installer Cassandra dans cette nouvelle machine !! 

https://formation.webdevpro.net/sql-nosql/07-cassandra.html 
(section3)

nodetool status

Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load       Tokens       Owns (effective)  Host ID                               Rack
UN  127.0.0.1  128,02 KiB  256          100,0%            eb37e6f3-8861-47ac-aac3-239d5212a7b8  rack1

u up 
n normal 

=> décrit l'infrastructure où sont stockées les données de Cassandra 

-----------------------

client en ligne de commande / mongo / sqlite3 mysql / redis-cli 

sqlsh 
=> outil en ligne de commande qui permet de créer 

Base de données dans Cassandra => KEYSPACE 
TABLE / COLUMNFAMILY 
ROW ligne 
COLUMN (là où stocke des données )

=> attention dans Cassandra on crée des KEYSPACE (équivalent de base de données du monde relationnel)

CREATE DATABASE nom_base (sql)

CREATE KEYSPACE nom_keyspace Tab ( le nombre de replication de chaque node cassandra  )


CREATE KEYSPACE nom_keyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1} ;

chaque serveur / node de Cassandra est par défaut répliqué information en + 1 
 'SimpleStrategy' => 

 lorsque vous créez une Base => définir des critère des replications des lignes / données quelle stocke

 => sur la chque ligne des tables dans la base Cassandra => clé de Partition (la 1ère colonne)
 => les lignes d'une table dans Cassandra ne sont pas stockées par défaut au même endroit dans le disque dur du serveur 
 => stocker sur plusieurs serveurs (node) par défaut 
 => en + Cassandra a système de replication automatique des informations en + écrire l'information sur 1 seul node => copie de l'information sur un autre node 

 => RAID 

 => Cassandra => cluster => ring (anneau)

 => 

 INSERT INTO table => écrire dans 1 fichier 1 seule endroit du serveur 

 INSERT INTO table_cassandra => clé => quel node il écrire les info ?? 
 // en + Automatiquement cassandra va écrire à nouveau l'information dans un autre node &

 DESCRIBE KEYSPACES 
 la liste des Keyspaces disponibles

DROP KEYSPACE nom_keyspace ; // supprimer un keyspace 

// créer une table 

USE nom_keyspace ; => cqlsh:nom_keyspace> 

CREATE TABLE demo (
    id INT PRIMARY KEY,
    nom TEXT
);

DESCRIBE TABLES ; // liste des tables disponibles dans un keyspace

DESCRIBE TABLE demo ; // liste des colonnes d'une table ET setting de la table 

ALTER TABLE demo ADD prenom TEXT ; // besoin d'ajouter une nouvelle colonne dans la table demo 

ALTER TABLE demo DROP nom ; // supprimer une colonne 

CREATE COLUMNFAMILY  demo2 ( // TABLE est un synonyme de COLUMNFAMILY
    id INT PRIMARY KEY,
    nom TEXT
);

// SELECT * FROM demo2 ;
 id nom 
clé primaire => comme une clé de Partition

INSERT INTO demo2 (id , nom) VALUES (1 , 'Alain')  ;

INSERT INTO demo2 (id , nom) VALUES (2, 'Benoit') ;
// Attention sur Cassandra il faut utiliser OBLIGATOIREMENT les ' pour délimiter les string et ne pas utiliser les " pour délimiter les string dans l'outil en ligne de commande cqlsh 

SELECT * FROM demo2 WHERE id = 1 ;

SELECT * FROM demo2 WHERE nom = 'Céline' ; // message d'erreur réponse peut être imprésivisble 

SELECT * FROM demo2 WHERE nom = 'Céline' ALLOW FILTERING ; // possible en ajoutant l'option  ALLOW FILTERING dans la requête recherche 

créer des tables qui répondre à tes requêtes 


CREATE TABLE vehicule_par_user (
    model text ,
    id_user int,
    nom_user text,
    service_user text ,
    PRIMARY KEY(model  , id_user  )
);

INSERT INTO vehicule_par_user (model , id_user, nom_user , service_user) VALUES ('BMW' , 1 , 'Alain' , 'IT');
INSERT INTO vehicule_par_user (model , id_user, nom_user , service_user) VALUES ('BMW' , 2 , 'Benoit' , 'RH');
INSERT INTO vehicule_par_user (model , id_user, nom_user , service_user) VALUES ('Peugeot' , 3 , 'Céline' , 'IT');

cette table permet de répondre à la question => quel marque par collaborateur 
qui conduit une peugeot ??? => Query First  

