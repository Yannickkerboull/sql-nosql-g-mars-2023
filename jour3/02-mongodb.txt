mongodb => huMONGOus => énorme 
Base de données NoSQL orientée Document 

// Objet => Redis HASH 
// Javascript => Objet 
// format JSON 
{
    "clé" : "valeur",
    "clé2" : "valeur"
}

=> relationnelles Base de données / TABLE / colonne / ligne
=> mongodb        Base de données / collection / Document 

// Projet à 100% en JS => MongoDB (base de données JSON)

// install de mongodb 

// apk add mongodb mongodb-tools

// mkdir -p /data/db  => dans ce dossier que les données au format BJSON

// modifier la config de mongodb pour utiliser avec un client visuel

// vim /etc/conf.d/mongodb


rc-service mongodb restart

netstat -putan
=> voir le port 27017

--------------------

mongo 
mongo --quiet ;

// liste de tous les bases 
show dbs ; 


admin   0.000GB => compte administrateur 
config  0.000GB
local   0.000GB

 mysql : CREATE DATABASE demo ;

use demo ; 

mysql : CREATE TABLE etudiant ( id INT , nom VARCHAR(255) )

// créer table (collection) etudiants et insérer un document dans cette table 
db.etudiants.insert({ nom : "Alain" , age : 12 });

const a = {};
a.nom = "Céline"
a.age = 25 ;
a.isAdmin = true ;
db.etudiants.insert(a);

SELECT * FROM etudiants 

db.etudiants.find() ;

=> mongodbcompass => mongodb

https://www.mongodb.com/

CRUD 
Create ajouter de nouveaux document dans la collection etudiants 
db.etudiants.insert({ nom : "Benoit" , age : 40 , dt_creation : new Date() })

db.etudiants.insertMany([ {nom : "Charlotte"}, {nom : "Charles"} ])

Read 
db.etudiants.find() // récupérer TOUT 
db.etudiants.find({ nom : "Alain" }) // que Alain
db.etudiants.find({ nom : { $in : ["Alain", "Charles"] }}) // Alain ou Charles 

db.etudiants.find({ nom : "Alain" } , { nom : 1 })
db.etudiants.find({nom:"Alain"},{nom:1,_id:0}) 
db.etudiants.find({nom : { $regex : /rl/g }})

update 
// mongodb 
db.etudiants.update({nom : "Alain" }, { $set : { nom : "Jean Pierre", age : 60 }})

// SQL 
UPDATE etudiants SET nom : "Jean Pierre" , age = 60 WHERE nom = "Alain";

delete 
db.etudiants.remove({nom : "Jean Pierre"})

DELETE FROM etudiants WHERE nom = "Jean Pierre"

db.etudiants.remove({_id : ObjectId("641ad706f2c40aa92f6fd766")})

show dbs ;
use demo ;
show collections ;

db.nom.insert({})
// créer la collection nom si elle n'existe pas 
// ajouter la ligne dans la collection nom 


remplir notre base de données mongodb via des fichiers json 

=> récupérer un fichier .json 
support chapitre 9 MongoDB > section 7 jeu de données 

apk add vsftpd

rc-service vsftpd start 

Lancer sur votre ordinateur Filezilla 

host :
sftp://192.168.1.103
login :
malik 
password :
root 
port 22 


mongoimport --db demo --collection paris --file /home/u/paris.json --jsonArray



db.paris.find({code_postal : "75006"}).pretty()

// les résultats 
db.paris.find({code_postal : "75006" , mot_cle : "culture"}).pretty()

// nombre de résultats
db.paris.find({code_postal : "75006" , mot_cle : "culture"}).count()

db.paris.find({ "geo_shape.geometry.coordinates" : 2.325711410418117 }).pretty()


db.paris.find({ "geo_shape.geometry.coordinates" : 2.325711410418117 }, {texte_description : 1 , code_postal : 1}).pretty()


db.paris.find({ "geo_shape.geometry.coordinates" : 2.325711410418117 }, {texte_description : 1 , code_postal : 1 , _id : 0}).pretty()

// cas pratique :
// pouvez modifier la valeur de la propriété 
code_postal du document qui a comme adresse 106 boulevard du montparnasse
code_postal 75006 => 75008 

db.paris.find({} , {texte_description : 1 , code_postal : 1}).pretty()

db.paris.update({ adresse : "106 boulevard du montparnasse" } , { $set : { code_postal : "75008" } });



authentification 

1 créer un compte admin pour notre base de données 
2 modifier le fichier de conf pour forcer l'authentification 
3 modifier l'url pour accéder à la base via MongoDB Compass 

mongo 

use admin ;

db.createUser(
    {
        user : "root",
        pwd : "root",
        roles : [{ role : "userAdminAnyDatabase" , db : "admin" }]
    }
)

show users ;

db.changeUserPassword("root", "123456")

exit 
vim /etc/conf.d/mongodb 

 rc-service mongodb restart

 mongodb://root:root@192.168.1.103:27017/?authMechanism=DEFAULT

use admin 
db.auth("root", "root")
 db.grantRolesToUser("root", [ { role: "readWrite", db: "demo" } ])







