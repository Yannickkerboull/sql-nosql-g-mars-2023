base de données relationnelle 

=> léger 
=> à part installé le logiciel sqlite3 


ssh malik@192.168.1.125
root 

// mettre en root sur la machine
=> su 
=> root 

# ajouter des repo en +
vi /etc/apk/repositories

décommenter la ligne http://dl-cdn.alpinelinux.org/alpine/v3.17/community
esc :wq! Enter
# mis à jour la liste de repo en local
apk update
# Télécharger le binaire sqlite
apk add sqlite

# créer un dossier test dans homet et positinné dessus
mkdir -p /home/test
cd /home/test
# créer un fichier demo.sqlite => extension que vous voulez 
touch demo.sqlite
# lance le binaire sqlite3 le fichier créé 
sqlite3 demo.sqlite

// créer un table user 
// 4 colonnes 
// id clé primaire 
// nom text avec un maximum de 255 lettres 
// age chiffre entier 
// status Boolean 

// user écrit en minuscule => variable
// CREATE TABLE IF NOT EXISTS => en majuscule car ce sont des mots clé du langage SQL 
// toutes les sql doivent se finir le symbole ; 

CREATE TABLE IF NOT EXISTS user (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    nom VARCHAR(255),
    age INT ,
    status BOOLEAN
);

// vous pouvez écrire les requêtes SQL intégralement en minuscule ou en majuscule => il est conseillé mais pas obligatoire de mettre mot clé de SQL en MAJUSCULE et les colonnes / nom table en minuscule 
create table if not exists toto()

// attention pour la dernière colonne pas de , 
// ajouter une nouvelle ligne dans la table user 
// 
INSERT INTO user  -- dans quel table 
( nom , age , status )  -- sur quelle colonne 
                       -- pour la clé primaire on ne met pas la colonne 
                       -- on laisse à SQlite la valeur à mettre 
                       -- qui a un compteur interne qui connait le numéro de ligne à ajouter 
VALUES                 -- quelles valeurs 
("Alain" , 22 , TRUE ); -- les valeurs à insérer 
                       -- l'ordre des valeurs doit respecter l'ordre des colonnes
                       -- dans la première paire de parenthèses

INSERT INTO user
( nom , age , status )
VALUES
("Alain" , 22 , TRUE );

-- vous pouvez ajouter plusieurs lignes simultanément


INSERT INTO user 
(nom , age , status)
VALUES 
("Benoit" , 40 , FALSE) ,
("Céline" , 12 , TRUE) ;

-- espace et les sauts de lignes dans les () sont facultatifs (aérer le code)

récupérer toutes les valeurs stockées dans la table user quelquesoit la colonne

SELECT * FROM user ;

1|Alain|22|1
2|Benoit|40|0
3|Céline|12|1

CRUD 
Create INSERT INTO 
Read SELECT 
Update UPDATE 

UPDATE user SET age = 13 WHERE id = 3 ; 
// filtrer l'update via la clé primaire => sur à 100% de mettre à jour le bon profil user
UPDATE user SET age = 13 WHERE nom = "Céline" ; 
// filtre via une autre colonne que l'id (clé primaire ) => il se peut que il ait plusieurs lignes qui soient modifiées car on peut avoir deux utilisateurs qui s'appellent Céline 

1|Alain|22|1
2|Benoit|40|0
3|Céline|13|1

base de données relationnelle => TABLE / Colonne / ligne 

supprimer une ligne dans la table user 

DELETE FROM user WHERE id = 2 ; 

1|Alain|22|1
3|Céline|13|1

// cas pratique 
// créer une table exo1 
contient 5 colonnes 
id clé primaire 
sujet texte de maximum 255 lettres 
duree chiffre entier 
unite texte maximum de 10 lettres 
status true / false 

insérer dans cette table les lignes (row) nuplet suivants 
exo 1 , 20 , "minutes" , vrai 
exo2 , 15 , "heures , faux 
exo final , 50 , secondes , vrai 

touch fichier.sqlite 
vi fichier.sqlite => une fois que le fichier est créé ne pas écrire dans le fichier avec vi par exemple 
il FAUT laisser le shell sqlite3 écrire dans le fichier 

Parse error: file is not a database (26)


restaure
sqlite3 toto.sqlite  < requete.sql

back up 
sqlite3 toto.sqlite .dump > blackup-toto.sql

préparation pour migration vers une autre machine 
cp blackup-toto.sql blackup-toto.prod.sql
sed -i 's/localhost:3000/mon-domain.com/g' blackup-toto.prod.sql

--------------

correction

CREATE TABLE IF NOT EXISTS exo1 (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ,
    sujet VARCHAR(255) ,
    duree INT ,
    unite VARCHAR(10),
    status BOOLEAN 
);

INSERT INTO exo1
( sujet , duree, unite , status )
VALUES
( "exo 1 ", 20 , "minutes" , TRUE  ),
("exo2" , 15 , "heures" , FALSE ),
("exo final" , 50 , "secondes" , FALSE  );

touch correction.sql
vi correction.sql
copier et coller le fichier correction.sql 
:wq!

 sqlite3 demo.sqlite < correction.sql

 SELECT *  FROM exo1 ; 


=> sur sqlite si j'ai besoin d'avoir l'ensemble des tables disponibles dans ma base :

SELECT * FROM sqlite_master WHERE type='table'
exo1
user 

créer une autre table 
vehicule contient 2 colonnes id clé primaire / marque 

CREATE TABLE IF NOT EXISTS vehicule (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ,
    marque VARCHAR(255)
);

INSERT INTO vehicule 
(marque) 
VALUES 
("BMW"),
("Peugeot") ;

SELECT * FROM user ; 

=> Céline a une BMW 
=> Alain a une Peugeot

// clé primaire => permet de distinguer une ligne dans une table 
                // un enregistrement dans une table / profil user 

// clé secondaire / clé étrangère 
                 => permet de faire référence à une ligne d'une AUTRE table 

utilisateur 1 utilise le véhicule 2 

CREATE TABLE profil (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ,
    nom VARCHAR(255) ,
    vehicule_id INTEGER ,
    FOREIGN KEY (vehicule_id) REFERENCES  vehicule (id)
); 
INSERT INTO profil 
(nom , vehicule_id)
VALUES 
("Alain", 2),
("Céline", 1) ;

SELECT * 
FROM profil 
JOIN vehicule 
ON profil.vehicule_id = vehicule.id ;





